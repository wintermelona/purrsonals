generator client {
  provider = "prisma-client-js"
  
}

datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
  @@index([userId])
}

enum Role {
  ADMIN
  USER
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  role          Role      @default(USER)
  applications  Application[]
  // cats          Cat[]
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Message {
  id            String    @id @default(cuid())
  message       String    
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Cat {
  id            String    @id @default(cuid())
  // userId        String?
  name          String
  sex           String
  age           String?   @default("1")
  description   String?   @db.Text
  image         String?   @default("https://res.cloudinary.com/dxfmetzdk/image/upload/v1689573001/default_cat_card.png")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  // owner         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([id])  
  // @@index([userId])

}

enum BuildingType {
  HOUSE
  CONDO
  APARTMENT
  OTHER
}


model Application {
  id            String      @id @default(cuid())
  userId        String
  firstname     String
  lastname      String
  address       String      @db.Text
  adoptee       String      
  phone         String?
  email         String
  occupation    String?     @default("N/A")
  description   String?     
  buildingType  BuildingType    @default(HOUSE)
  adoption      Boolean     @default(false)
  renting       Boolean     @default(false)
  status        String?     @default("Pending")
  applicant     User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  @@index([userId])
  @@unique([id])  
}